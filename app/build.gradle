apply plugin: 'com.android.application'
//配置自定义插件
apply plugin: 'com.plugindemo'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.shuaijia.gradledemo"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        //debug 是as默认的公共签名
        release {
            storeFile file("keystore")
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名 一般情况这样配置就好了
            signingConfig signingConfigs.release
        }
    }
    //组合所有的flavors，修改输出目录
    applicationVariants.all {
        appendVersionNameVersionCode(it, defaultConfig)
    }
    //四种组合，
    flavorDimensions "cooperator", "model"
    productFlavors {
        cooperatorA {
            applicationIdSuffix ".cooperatora"
            manifestPlaceholders = [UMENG_VALUE: "cooperatorA"]
            buildConfigField("String", "URL", "\"cooperatorA url\"")
            dimension "cooperator"

        }
        cooperatorB {
            applicationIdSuffix ".cooperatorb"
            manifestPlaceholders = [UMENG_VALUE: "cooperatorB"]
            buildConfigField("String", "URL", "\"cooperatorB url\"")
            dimension "cooperator"
        }
        modelA {
            resValue "string", "app_name", "GradleDemoA"
            resValue "color", "flavor_color", "#0000ff"
            dimension "model"
        }
        modelB {
            resValue "string", "app_name", "GradleDemoB"
            resValue "color", "flavor_color", "#ff0000"
            dimension "model"
        }
        modelC {
            resValue "string", "app_name", "GradleDemoC"
            resValue "color", "flavor_color", "#ffffff"
            dimension "model"
        }
    }
    //变体过滤器 过滤掉modelC的release包
    variantFilter {
        if (it.buildType.name.equals("release")) {
            it.getFlavors().each {
                flavor ->
                    if (flavor.name.equals("modelC")) {
                        it.setIgnore(true)
                    }
            }
        }
    }

    task printFlavor {
        //自定义任务属性 使用方法 printFlavor.myProperty
        ext.myProperty = "myValue"
        group "userDefined"
        description "输出一哈Flavor组合"
        applicationVariants.all {
            println it.name
        }
        println "----------------taskNames-----------"
        println gradle.startParameter.taskNames.toString()
    }
    //取消任务
    //tasks会获取当前project中所有的task，enabled属性控制任务开关，whenTaskAdded后面的闭包会在gradle配置阶段完成。
    tasks.whenTaskAdded { task ->
        if (task.name.contains('AndroidTest')) {
            task.enabled = false
        }
    }

    //动态任务
    4.times {
        counter ->
            task "task$counter" << {
                group "userdefined"
                println "Im task number $counter"
            }
    }
    //加入任务 执行顺序2，3，0
    task0.dependsOn task2, task3

    task0.doFirst {
        println "Hello doFirst " + printFlavor.myProperty
    }
    task0.doLast {
        println "hello doLast"
    }
    task0 << {
        println "hello <<"
    }
    //默认任务 gradle -q
    //等价于 gradle clean run.
    // 在一个多项目构建中, 每一个子项目都可以有它特别的默认任务. 如果一个子项目没有特别的默认任务, 父项目的默认任务将会被执行.
    defaultTasks "dTask1", "dTask2"

    task dTask1 << {
        println "Hello dTask1"
    }
    task dTask2 << {
        println "Hello dTask2"
    }
}

static def appendVersionNameVersionCode(variant, defaultConfig) {
    variant.outputs.each { output ->
//        if (output.zipAlign) {
        def file = output.outputFile
        def fileName = file.name.replace(".apk", "_" + defaultConfig.versionName + ".apk").replaceFirst("app", "rent_customer").replace("-", "_")
        output.outputFileName = fileName
//        }
//        else {
//            def file = output.outputFileName
//            def fileName = file.replace(".apk", "_" + defaultConfig.versionName + ".apk").replaceFirst("app", "rent_customer").replace("-", "_")
//            output.outputFileName = fileName
//        }

    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
pluginExt {
    param1 = 'app param1'
    param2 = 'app param2'
    nestExt {
        nestParam1 = 'app nestParam1'
        nestParam2 = 'app nestParam2'

    }
}